/*
VisAD system for interactive analysis and visualization of numerical
data.  Copyright (C) 1996 - 2006 Bill Hibbard, Curtis Rueden, Tom
Rink, Dave Glowacki, Steve Emmerson, Tom Whittaker, Don Murray, and
Tommy Jasmin.

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with this library; if not, write to the Free
Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
MA 02111-1307, USA
*/

options
{
    STATIC = false;
    DEBUG_PARSER = false;
    DEBUG_TOKEN_MANAGER = false;
    // LOOKAHEAD=2;
    // FORCE_LA_CHECK=true;
}

PARSER_BEGIN(UnitParser)

    package visad.data.units;

    import java.io.ByteArrayInputStream;
    import java.io.InputStreamReader;
    import java.io.LineNumberReader;
    import java.util.Calendar;
    import java.util.TimeZone;
    import visad.DerivedUnit;
    import visad.SI;
    import visad.Unit;
    import visad.UnitException;

    /**
     * A class for parsing string unit specifications.
     *
     * Instances are thread-compatible but not thread-safe.
     */
    public class UnitParser
    {
        /**
         * The units database.
         */
        protected static UnitsDB        unitsDB = null;

        static
        {
            try
            {
                unitsDB = DefaultUnitsDB.instance();
            }
            catch(UnitException e)
            {
            }
        }

        /**
         * The canonical time unit.
         */
        protected static final Unit     SECOND = SI.second;

        /**
         * The Julian day number of the (artificial) time origin.
         */
        protected static final long     julianDayOrigin = 
                                            UnitParser.julianDay(2001, 1, 1);
                                            
        /**
         * The dimensionless unit one.
         */
        private static final Unit ONE = new DerivedUnit();


        /**
         * Compute the Julian day number of a date.
         */
        public static long
        julianDay(int year, int month, int day)
        {
            long        igreg = 15 + 31 * (10 + (12 * 1582));
            int         iy;     // signed, origin-0 year
            int         ja;     // Julian century
            int         jm;     // Julian month
            int         jy;     // Julian year
            long        julday; // returned Julian day number

            /*
             * Because there is no 0 BC or 0 AD, assume the user wants
             * the start of the common era if they specify year 0.
             */
            if (year == 0)
                year = 1;

            iy = year;
            if (year < 0)
                iy++;
            if (month > 2)
            {
                jy = iy;
                jm = month + 1;
            }
            else
            {
                jy = iy - 1;
                jm = month + 13;

            }

            julday = day + (int)(30.6001 * jm);
            if (jy >= 0)
            {
                julday += 365 * jy;
                julday += 0.25 * jy;
            }
            else
            {
                double  xi = 365.25 * jy;

                if ((int)xi != xi)
                    xi -= 1;
                julday += (int)xi;
            }
            julday += 1720995;

            if (day + (31* (month + (12 * iy))) >= igreg)
            {
                ja = jy/100;
                julday -= ja;
                julday += 2;
                julday += ja/4;
            }

            return julday;
        }


        /**
         * Encode a timestamp as a double value in units of seconds.
         */
        public static double
        encodeTimestamp(int year, int month, int day,
            int hour, int minute, float second, int zone)
        {
            return (julianDay(year, month, day) - julianDayOrigin) *
                86400.0 + (hour*60 + minute - zone)*60 + second;
        }
        
        
        private static void myAssert(UnitParser parser, final String spec,
                Unit expect) throws UnitException, ParseException
        {
            if (!parser.parse(spec).equals(expect)) {
                throw new AssertionError("Got \"" + spec + "; expected \"" +
                    expect + "\"");
            }
            System.out.println(spec + " -> " + expect);
        }
        
        
        /**
         * Parses a string unit specification.
         *
         * @param spec The unit specification.
         * @return A {@link Unit} corresponding to {@code spec}.
         * @throws NullPointerException if {@code spec} is {@code null}.
         * @throws ParseException if a parsing error occurred.
         * @throws UnitException if the string specifies an invalid unit
         * operation.
         */
        public Unit parse(final String spec) throws ParseException,
            UnitException
        {
            ReInit(new ByteArrayInputStream(spec.getBytes()));
            return unitSpec();
        }


        /**
         * Test this class.
         */
        public static void main(String[] args)
            throws Exception
        {
            UnitParser          parser = new UnitParser(System.in);
            LineNumberReader    lineInput = new LineNumberReader(
                                    new InputStreamReader(System.in));
            Unit    s = unitsDB.get("s");
            Unit    m = unitsDB.get("m");
            Unit    kg = unitsDB.get("kg");
            Unit    w = unitsDB.get("W");
            Unit    epoch = s.shift(encodeTimestamp(1970, 1, 1, 0, 0, 0f, 0));

            myAssert(parser, "m m", m.multiply(m));
            myAssert(parser, "m.m", m.multiply(m));
            myAssert(parser, "(m)(m)", m.pow(2));
            myAssert(parser, "m/s/s", m.divide(s).divide(s));
            myAssert(parser, "m2", m.pow(2));
            myAssert(parser, "m2.s", m.pow(2).multiply(s));
            myAssert(parser, "m2/s", m.pow(2).divide(s));
            myAssert(parser, "m^2/s", m.pow(2).divide(s));
            myAssert(parser, "m s @ 5", m.multiply(s).shift(5));
            myAssert(parser, "m2 s @ 5", m.pow(2).multiply(s).shift(5));
            myAssert(parser, "m2 s-1 @ 5", m.pow(2).divide(s).shift(5)); 
            myAssert(parser, "m s from 5", m.multiply(s).shift(5));
            myAssert(parser, "m s kg @ 5", m.multiply(s).multiply(kg).shift(5));
            myAssert(parser, "s@19700101", epoch);
            myAssert(parser, "s@19700101T000000", epoch);
            myAssert(parser, "s@19700101T000000.00", epoch);
            myAssert(parser, "s @ 1970-01-01T00:00:00.00", epoch);
            myAssert(parser, "s @ 1970-01-01 00:00:00.00", epoch);
            myAssert(parser, "s @ 1970-01-01T00:00:00.00 -12",
                s.shift(encodeTimestamp(1970, 1, 1, 12, 0, 0f, 0)));
            myAssert(parser, "s @ 1970-01-01T00:00:00.00 -12",
                s.shift(encodeTimestamp(1970, 1, 1, 0, 0, 0f, -12*60)));
            myAssert(parser, "lg(re: 1)", ONE.log(10));
            myAssert(parser, "0.1 lg(re 1 mW)", w.scale(1e-3).log(10).scale(0.1));
            myAssert(parser, "m", m);
            myAssert(parser, "2 m s", m.multiply(s).scale(2));
            myAssert(parser, "3.14 m.s", m.multiply(s).scale(3.14));
            myAssert(parser, "1e9 (m)", m.scale(1e9));
            myAssert(parser, "(m s)2", m.multiply(s).pow(2));
            myAssert(parser, "m2.s-1", m.pow(2).divide(s));
            myAssert(parser, "m2 s^-1", m.pow(2).divide(s));
            myAssert(parser, "(m/s)2", m.divide(s).pow(2));
            myAssert(parser, "m2/s-1", m.pow(2).divide(s.pow(-1)));
            myAssert(parser, "m2/s^-1", m.pow(2).divide(s.pow(-1)));
            myAssert(parser, ".5 m/(.25 s)2", m.scale(.5).divide(
                    s.scale(.25).pow(2)));
            myAssert(parser, "m.m-1.m", m.multiply(m.pow(-1)).multiply(m));
            myAssert(parser, "2.0 m 1/2 s-1*(m/s^1)^-1 (1e9 m-1)(1e9 s-1)-1.m/s", m
                    .scale(2).scale(1. / 2.).multiply(s.pow(-1)).multiply(
                            m.divide(s.pow(1)).pow(-1)).multiply(
                            m.pow(-1).scale(1e9)).multiply(
                            s.pow(-1).scale(1e9).pow(-1)).multiply(m)
                    .divide(s));
            myAssert(parser, "m/km", m.divide(m.scale(1e3)));

            for (;;)
            {
                System.out.print("Enter a unit specification or ^D to quit: ");

                String  spec = lineInput.readLine();
                if (spec == null)
                    break;

                spec = spec.trim();

                if (spec.length() > 0)
                {
                    parser.ReInit(new ByteArrayInputStream(spec.getBytes()));

                    try
                    {
                        Unit    unit = parser.unitSpec();
                        System.out.println("unit = " + unit);
                        System.out.println(
                            "definition = " + unit.getDefinition());
                    }
                    catch (ParseException e)
                    {
                        System.out.println(e.getMessage());
                    }
                }
            }
            System.out.println("");
        }
    }

PARSER_END(UnitParser)

TOKEN [IGNORE_CASE] :
{
        < SP:       ([" ","\t","\n","\r"])+ >
    |   < PLUS:     "+" >
    |   < MINUS:    "-" >
    |   < COLON:    ":" >
    |   < UINT:     (["0"-"9"])+ >
    |   <#SIGN:     <PLUS> | <MINUS> >
    |   <#LETTER:   ["a"-"z","_","°"] >
    |   < LPAREN:   "(" >
    |   < RPAREN:   ")" >
    |   < REAL_EXP: "e" (<SIGN>)? <UINT> >
    |   < RAISE:    "^" >
    |   < PERIOD:   "." >
    |   < STAR:     "*" >
    |   < DIVIDE:   "/" | (<SP>) "per" (<SP>) >
    |   < SHIFT:    (<SP>)? "@" (<SP>)? | (<SP>) ("since" | "from") (<SP>) >
    |   < SYMBOL:   ["'","\"","%"] >
    |   < T:        "t" >
    |   < NAME:     (<LETTER>)+ (<UINT> (<LETTER>)+)? >
    |   < LB:       "lb(re" (":")? (<SP>)? >
    |   < LN:       "ln(re" (":")? (<SP>)? >
    |   < LG:       "lg(re" (":")? (<SP>)? >
    |   < UTC:      "utc" | "gmt" | "zulu" >
}


Unit unitSpec() throws UnitException :
{
    Unit    unit = ONE;
}
{
    [
        unit=shiftExpr() 
    ]
    <EOF>
    {
        return unit;
    }
}


Unit shiftExpr() throws UnitException :
{
    Unit        unit;
    double      origin;
}
{
    unit=productExpr()
    [
        LOOKAHEAD(2)
        <SHIFT>
        {
            if (Unit.canConvert(unit, SECOND)) {
                origin=timeOriginExpr();
                unit = unit.shift(unit.toThis(origin, SECOND));
            }
            else {
                origin=number();
                if (origin != 0)
                    unit = unit.shift(origin);
            }
        }
    ]
    {
        return unit;
    }
}


Unit productExpr() throws UnitException :
{
    Unit        unit, unit2;
}
{
    unit=powerExpr()
    (
            LOOKAHEAD(2)
            <DIVIDE>
            unit2 = powerExpr()
            {
                unit = unit.divide(unit2);
            }
        |       
            [ <PERIOD> | <STAR> | <SP> ]
            unit2=powerExpr() 
            {
                unit = unit.multiply(unit2);
            }
    )*
    {
        return unit;
    }
}


Unit powerExpr() throws UnitException :
{
    Unit    unit;
    int     exponent;
}
{
    unit=basicExpr()
    [
        [ <RAISE> ]
        exponent=integer()
        {
            unit = unit.pow(exponent);
        }
    ]
    {
        return unit;
    }
}


Unit basicExpr() throws UnitException :
{
    Unit    unit;
    double  number;
}
{
    (
            number = number()
            {
                unit =  ONE.scale(number);
            }
        |                           
            unit=unitIdentifier()
        |
            unit=logExpr()
        |
            <LPAREN> (<SP>)? unit=shiftExpr() (<SP>)? <RPAREN>
    )
    {
        return unit;
    }
}


Unit unitIdentifier() :
{
    Token   token;
    Unit    unit;
}
{
    (
            token=<T>
        |
            token=<NAME>
        |
            token=<SYMBOL>
    )
    {
        unit = unitsDB.get(token.image);
        if (unit == null)
        {
            throw new NoSuchUnitException("Unit not in database");
        }
        return unit;
    }
}


Unit logExpr() throws UnitException :
{
    double base;
    Unit   ref;
}
{
    (
            <LB> {base = 2;}
        |
            <LN> {base = Math.E;}
        |
            <LG> {base = 10;}
    )
    ref = productExpr() [<SP>] <RPAREN>
    {
        return ref.log(base);
    }
}


double number() :
{
    double  number;
}
{
    (
            LOOKAHEAD(3)
            number = real()
        |
            number = integer()
    )
    {
        return number;
    }
}


double real() :
{
    int    sign = 1;
    double tenFactor = 1;
    double udecimal;
}
{
    [sign = sign()]
    (
            LOOKAHEAD(2)
            udecimal = unsignedDecimal()
            [ tenFactor = tenFactor() ]
        |
            udecimal = unsignedInteger()
            tenFactor = tenFactor()
    )
    {
        return sign * udecimal * tenFactor;
    }
}


int sign() :
{}
{
        <PLUS> { return 1; }
    |
        <MINUS> { return -1; }
}


double unsignedDecimal() :
{
    int     integer = 0;
    Token   token;
    double  fraction = 0;
}
{
    (
            LOOKAHEAD(3)
            [integer=unsignedInteger()]
            <PERIOD>
            token = <UINT>
            {
                fraction = Double.valueOf("." + token.image);
            }
        |
            integer=unsignedInteger()
            <PERIOD>
    )
    {
        return integer + fraction;
    }
}


double tenFactor() :
{
    Token  token;
}
{
    token = <REAL_EXP>
    {
        return Double.valueOf("1" + token.image);
    }
}


int integer() :
{
    int     magnitude;
    int     sign = 1;
}
{
    [ sign = sign() ]
    magnitude = unsignedInteger()
    {
        return sign * magnitude;
    }
}


int unsignedInteger() :
{
    Token       token;
}
{
    token=<UINT>
    {
        return Integer.valueOf(token.image);
    }
}


/*
 * See <http://www.cl.cam.ac.uk/~mgk25/iso-time.html> for a discussion of the
 * relevant timestamp format or lookup "ISO 8601".
 */
double timeOriginExpr() :
{
    Calendar   calendar;
}
{
    calendar = dateExpr()
    [
        LOOKAHEAD(2)
        (<T> | <SP>)
        clockExpr(calendar)
        [
            LOOKAHEAD(2)
            [<SP>]
            zoneExpr(calendar)
        ]
    ]
    {
        return encodeTimestamp(calendar.get(Calendar.YEAR),
            calendar.get(Calendar.MONTH)+1, calendar.get(Calendar.DAY_OF_MONTH),
            calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE),
            (float)(calendar.get(Calendar.SECOND) + 
            calendar.get(Calendar.MILLISECOND)/1e3),
            calendar.get(Calendar.ZONE_OFFSET)/(1000*60));
    }
}


Calendar dateExpr() :
{
    int        sign = 1;
    int        year;
    int        month = 1;
    int        day = 1;
    boolean    packed = true;
}
{
    [sign = sign() ]
    year = unsignedInteger()
    [
        <MINUS>
        month = unsignedInteger()
        {
            packed = false;
        }
        [
            <MINUS>
            day = unsignedInteger()
        ]       
    ]
    {
        if (packed) {
            if (year >= 10000101) {
                day = year % 100;
                year /= 100;
            }
            if (year >= 100001) {
                month = year % 100;
                year /= 100;
            }
            if (sign < 0)
                year = -year;
        }
        if (month < 1 || month > 12)
            throw new ParseException("invalid month in timestamp");
        if (day < 1 || day > 31)
            throw new ParseException("invalid day in timestamp");
        Calendar    calendar = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
        calendar.clear();
        calendar.set(year, month-1, day);
        return calendar;
    }
}


Calendar clockExpr(Calendar calendar) :
{
    double     hour;
    int        minute = 0;
    double     seconds = 0;
    boolean    packed = true;
}
{
    (
            LOOKAHEAD(2)
            hour = unsignedDecimal()
        |
            hour = unsignedInteger()
    )
    [
        <COLON>
        minute = unsignedInteger()
        {
            packed = false;
        }
        [
            <COLON>
            (
                    LOOKAHEAD(2)
                    seconds = unsignedDecimal()
                |
                    seconds = unsignedInteger()
            )
        ]       
    ]
    {
        if (packed) {
            if (hour >= 100000) {
                seconds = hour % 100;
                hour /= 100;
            }
            if (hour >= 1000) {
                minute = (int)(hour % 100);
                hour /= 100;
            }
        }
        if (hour < 0 || hour > 23)
            throw new ParseException("invalid hour in timestamp");
        if (minute < 0 || minute > 59)
            throw new ParseException("invalid minute in timestamp");
        if (seconds < 0 || seconds > 61)
            throw new ParseException("invalid seconds in timestamp");
        calendar.set(Calendar.HOUR_OF_DAY, (int)Math.round(hour));
        calendar.set(Calendar.MINUTE, minute);
        int s = (int)seconds;
        calendar.set(Calendar.SECOND, s);
        int ms = (int)((seconds - s) * 1000);
        calendar.set(Calendar.MILLISECOND, ms);
        return calendar;
    }
}

Calendar zoneExpr(Calendar calendar) :
{
    int         sign = 1;
    int         zoneHour;
    int         zoneMinute = 0;
    Token       token;
    TimeZone    timeZone;
}
{
    (
            [sign=sign()]
            zoneHour=unsignedInteger()
            [[<COLON>] zoneMinute=unsignedInteger()]
            {
                if (zoneHour >= 100)
                {
                    zoneMinute += zoneHour % 100;
                    zoneHour /= 100;
                }
                if (zoneHour > 23 || zoneMinute > 59)
                {
                    throw new ParseException("invalid time-zone in timestamp");
                }
                timeZone = TimeZone.getDefault();
                timeZone.setRawOffset(sign*(zoneHour*60 + zoneMinute)*60*1000);
            }
        |
            token = <NAME>
            {
                timeZone = TimeZone.getTimeZone(token.image);
            }
    )
    {
        calendar.setTimeZone(timeZone);
        return calendar;
    }
}
